name: Build and Deploy TruLoad Frontend

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install DevOps Tools
      uses: Bengo-Hub/devops-k8s/.github/actions/install-devops-tools@main

    - name: Debug available secrets
      run: |
        echo "Checking which tokens are available..."
        [[ -n "${{ secrets.GH_PAT }}" ]] && echo "✅ GH_PAT is set" || echo "❌ GH_PAT not found"
        [[ -n "${{ secrets.GIT_SECRET }}" ]] && echo "✅ GITHUB_SECRET is set" || echo "❌ GITHUB_SECRET not found"
        [[ -n "${{ secrets.GITHUB_TOKEN }}" ]] && echo "✅ GITHUB_TOKEN is set (default)" || echo "❌ GITHUB_TOKEN not found"

    - name: Set deployment variables
      run: |
        echo "DEPLOY=true" >> $GITHUB_ENV
        echo "SETUP_DATABASES=false" >> $GITHUB_ENV
        echo "NAMESPACE=truload" >> $GITHUB_ENV
        echo "ENV_SECRET_NAME=truload-frontend-env" >> $GITHUB_ENV
        echo "REGISTRY_SERVER=docker.io" >> $GITHUB_ENV
        echo "REGISTRY_NAMESPACE=codevertex" >> $GITHUB_ENV
        echo "VALUES_FILE_PATH=apps/truload-frontend/values.yaml" >> $GITHUB_ENV
        echo "APP_NAME=truload-frontend" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_API_URL=https://truloadapitest.masterspace.co.ke" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_WS_URL=wss://truloadapitest.masterspace.co.ke/ws" >> $GITHUB_ENV

    - name: Run production deployment
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        # Use GH token for HTTPS auth in build.sh
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        GH_PAT: ${{ secrets.GH_PAT }}
        GITHUB_SECRET: ${{ secrets.GIT_SECRET }}
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        GITHUB_SHA: ${{ github.sha }}
        DEPLOY: true
        SETUP_DATABASES: false
        NAMESPACE: truload
        ENV_SECRET_NAME: truload-frontend-env
        REGISTRY_SERVER: docker.io
        REGISTRY_NAMESPACE: codevertex
        VALUES_FILE_PATH: apps/truload-frontend/values.yaml
        APP_NAME: truload-frontend
        GIT_USER: ${{ secrets.GIT_USER || 'TruLoad Bot' }}
        GIT_EMAIL: ${{ secrets.GIT_EMAIL || 'dev@truload.io' }}
        # Build args for Next.js
        NEXT_PUBLIC_API_URL: https://truloadapitest.masterspace.co.ke
        NEXT_PUBLIC_WS_URL: wss://truloadapitest.masterspace.co.ke/ws
      run: |
        chmod +x build.sh
        # Export environment variables for build.sh
        export NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL}"
        export NEXT_PUBLIC_WS_URL="${NEXT_PUBLIC_WS_URL}"
        export NAMESPACE="${NAMESPACE}"
        export APP_NAME="${APP_NAME}"
        ./build.sh

    - name: Tag and push :latest
      if: success()
      env:
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      run: |
        set -e
        : "${REGISTRY_SERVER:=docker.io}"
        : "${REGISTRY_NAMESPACE:=codevertex}"
        IMAGE_REPO="${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/truload-frontend"
        SHORT_SHA=${GITHUB_SHA::8}
        echo "Tagging ${IMAGE_REPO}:${SHORT_SHA} as :latest"
        echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_SERVER" -u "$REGISTRY_USERNAME" --password-stdin
        docker pull "${IMAGE_REPO}:${SHORT_SHA}" || true
        docker tag "${IMAGE_REPO}:${SHORT_SHA}" "${IMAGE_REPO}:latest"
        docker push "${IMAGE_REPO}:latest"

    - name: Trigger ArgoCD sync and wait for deployment
      if: success()
      env:
        KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG }}
        NS: truload
        APP_NAME: truload-frontend
      run: |
        if [ -z "${KUBE_CONFIG_B64}" ]; then
          echo "⏭️ Skipping ArgoCD sync - no KUBE_CONFIG available"
          exit 0
        fi
        
        echo "::group::ArgoCD Sync"
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG_B64" | base64 -d > ~/.kube/config
        
        # Check if ArgoCD Application exists
        if kubectl get application ${APP_NAME} -n argocd >/dev/null 2>&1; then
          echo "✓ ArgoCD Application '${APP_NAME}' found"
          
          # Refresh to detect values.yaml changes
          kubectl patch application ${APP_NAME} -n argocd --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}' || true
          
          echo "Waiting for ArgoCD to sync (up to 120 seconds)..."
          for i in {1..24}; do
            SYNC_STATUS=$(kubectl get application ${APP_NAME} -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "Unknown")
            HEALTH_STATUS=$(kubectl get application ${APP_NAME} -n argocd -o jsonpath='{.status.health.status}' 2>/dev/null || echo "Unknown")
            
            echo "  Sync: ${SYNC_STATUS}, Health: ${HEALTH_STATUS}"
            
            if [[ "$SYNC_STATUS" == "Synced" && "$HEALTH_STATUS" == "Healthy" ]]; then
              echo "✅ Application synced and healthy"
              break
            fi
            
            sleep 5
          done
          
          # Verify deployment exists after sync
          kubectl get deployment ${APP_NAME}-app -n ${NS} || echo "⚠️ Deployment not found yet"
        else
          echo "⚠️ ArgoCD Application '${APP_NAME}' not found"
          echo "Run provision workflow to create ArgoCD Applications"
        fi
        echo "::endgroup::"

    - name: Verify UI health
      if: success()
      env:
        KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG }}
        NS: truload
      run: |
        if [ -z "${KUBE_CONFIG_B64}" ]; then
          echo "⏭️ Skipping health check - no KUBE_CONFIG available"
          exit 0
        fi

        echo "::group::Health check"
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG_B64" | base64 -d > ~/.kube/config

        # Ensure deployment is rolled out
        kubectl rollout status deployment/truload-frontend-app -n ${NS} --timeout=300s

        # Try ingress health endpoint
        HOSTS=$(kubectl get ingress -n ${NS} -o jsonpath='{.items[*].spec.rules[*].host}' | tr ' ' '\n' | grep -E '^truloadtest' || true)
        if [ -n "$HOSTS" ]; then
          STATUS=1
          for H in $HOSTS; do
            echo "Checking https://$H/ ..."
            if curl -sk --max-time 10 "https://$H/" | grep -Ei "truload|<!DOCTYPE html>" >/dev/null; then
              echo "✅ Health OK for $H"
              STATUS=0
              break
            fi
          done
          if [ $STATUS -ne 0 ]; then
            echo "⚠️ Health endpoint did not return expected content; rollout completed but may still be initializing"
          fi
        else
          echo "No ingress host found; skipping external health probe"
        fi
        echo "::endgroup::"
